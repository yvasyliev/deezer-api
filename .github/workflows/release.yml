name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true

env:
  TAG: v${{ github.event.inputs.version }}

jobs:
  check-input:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.inputs.version }}
          regex: '^\d+\.\d+\.\d+$'
      - name: Check release version
        if: steps.regex-match.outputs.match == ''
        run: |
          echo "::error::Incorrect release version format: ${{ github.event.inputs.version }}. Expected format: x.y.z!"
          exit 1
  check-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get latest tag
        id: get_latest_tag
        uses: actions-ecosystem/action-get-latest-tag@v1
      - name: Check new tag
        if: env.TAG == steps.get_latest_tag.outputs.tag
        run: |
          echo "::error::Tag ${{ env.TAG }} already exists!"
          exit 1
  create-tag:
    runs-on: ubuntu-latest
    needs: [ check-input, check-tag ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create Tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.TAG }}
  release:
    runs-on: ubuntu-latest
    needs: [ create-tag ]
    steps:
      - name: Set JAR_NAME
        run: |
          echo "JAR_NAME=${{ env.JAR_NAME_TEMPLATE }}" | sed "s/*/${{ github.event.inputs.version }}/g" >> $GITHUB_ENV
      - name: Set JAR_PATH
        run: |
          echo "JAR_PATH=target/${{ env.JAR_NAME }}" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        run: mvn package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          draft: true
          body: |
            ```xml
            <dependency>
                <groupId>com.github.yvasyliev</groupId>
                <artifactId>deezer-api</artifactId>
                <version>{{ github.event.inputs.version }}</version>
            </dependency>
            ```
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_PATH }}
          asset_name: ${{ env.JAR_NAME }}
          asset_content_type: application/java-archive
#  publish:
#    runs-on: ubuntu-latest
#    needs: [ check-input, check-tag ]
#    steps:
#      - name: Install gpg secret key
#        run: |
#          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
#          gpg --list-secret-keys --keyid-format LONG
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Set up JDK 8
#        uses: actions/setup-java@v3
#        with:
#          java-version: '8'
#          distribution: 'adopt'
#          cache: maven
#          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
#          server-username: MAVEN_USERNAME # env variable for username in deploy
#          server-password: MAVEN_PASSWORD # env variable for token in deploy
#          gpg-private-key: ${{ secrets.OSSRH_GPG_SECRET_KEY }} # Value of the GPG private key to import
#          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
#      - name: Publish to Central Repository
#        env:
#          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
#        run: mvn -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} deploy
